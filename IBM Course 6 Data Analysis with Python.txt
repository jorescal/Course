IBM Course 6 Data Analysis with Python





cd ~/Desktop/'IBM Course'/Github2/GitReps/Course







# First of all, create new Repo on Github

cd ~/Desktop/Github2/GitReps/	# create a new directory on your computer
mkdri Course			# every new directory needs to be create from the command line
cd Course 



git init
git config --global user.email "jorescal@gmail.com"


ls				# make sure you have the files you want to upload on the directory you are seeting


echo "# Data Science Course" >> README.md
git add README.md
git commit  -m "first commit of course notes xx/xx/2020"



git add 'IBM Course 6 Data Analysis with Python.txt'
git add 'for_loops.ipynb'

git commit  -m "commit # upedate XX of course notes date xx/xx/2020"

for_loops.ipynb

git remote add origin git@github.com:jorescal/Course.git
git push -u origin master
















********** for every day update 


cd ~/Desktop/Github2/GitReps/Course


git add 'IBM Course 6 Data Analysis with Python.txt'
git add 'for_loops.ipynb'
git commit  -m "commit # XX of course notes date xx/xx/2020"
git push 
















*********************** Week 1  - Python Packages for Data Science



We have divided the Python data analysis libraries into three groups.



	Scientific computing libraries




* Pandas : The primary instrument of Pandas is the two dimensional table consisting of column and row labels, which are called a data frame. 



* NumPy: uses arrays for its inputs and outputs. 



* SciPy: includes functions for some advanced math problems as well as data visualization.






	data visualization methods



* Matplotlib package: is the most well known library for data visualization. 

* Seaborn: It is based on Matplotlib. It's very easy to generate various plots such as heat maps, time series and violin plots.







	machine learning algorithms



* Scikit-learn library: contains tools statistical modeling, including regression, classification, clustering, and so on. This library is built on NumPy, SciPy and Matplotib. 



* Statsmodels: is also a Python module that allows users to explore data, estimate statistical models, and perform statistical tests.






*** *** *** *** read any data using python's pandas package. 






	#from the command line run the following commannds 


import pandas as pd
url = "https://onc/it.com/admin/conta.csv"    #specify the url where the data frame is located
df = pd.read_csv*(url)






	# if the data frame does not have a header run the following command

df = pd.read_csv (url, header - None)






	# Print (n) row from the data frame (n = the number of row from top to bottom)

df.head(10)		# 10 = the number of row from top to bottom
df.tail(13)		# 13 = the number of row from top to bottom



	


	# Assdign colum names 


headers = ["brand", "fuel", "shift", "Price" ]
df.columns = headers
df.head(5)





	# Export data fram to new csv file\

path = "C/windows/.../cars.csv"
df.to_csv(path)






	# check for Data types

df.dtypes





	# Summary for all columns 

df.describe(include = "all")

	# And

df.info()







*** *** *** *** Accessing Databases with Python


You use connection objects to connect to a database and manage your transactions. 


Cursor objects are used to run queries. Cursors are used to scan through the results of a database.



Here are the methods used with connection objects. 

* The cursor() method returns a new cursor object using the connection. 

* The commit() method is used to commit any pending transaction to the database. 

* The rollback() method causes the database to roll back to the start of any pending transaction.

* The close() method is used to close a database connection. 




