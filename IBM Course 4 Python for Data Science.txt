1



# First of all, create new Repo on Github

cd ~/Desktop/Github2/GitReps/	# create a new directory on your computer
mkdri Course			# every new directory needs to be create from the command line
cd Course 



git init
git config --global user.email "jorescal@gmail.com"


ls				# make sure you have the files you want to upload on the directory you are seeting


echo "# Data Science Course" >> README.md
git add README.md
git commit  -m "first commit of course notes xx/xx/2020"



git add 'IBM Course 4 Python for Data Science.txt'
git commit  -m "commit # upedate XX of course notes date xx/xx/2020"

git remote add origin git@github.com:jorescal/Course.git
git push -u origin master





********** for every day update 


cd ~/Desktop/Github2/GitReps/Course


git add 'IBM Course 4 Python for Data Science.txt'
git commit  -m "commit # XX of course notes date xx/xx/2020"
git push 













**************************




data types 

int -- a number (1,4,88,134523 )
float -- example 1.25653, 78.25, 1.5
string -- secuence of characters ("1", "car", "false")
boolean --True, False


We can change types on python. 

	for example a float as an int 
		int (2.2) = 2

NOTE
you could be lossing information.

	Or a an int to a boolean 
		bool(1) = True


Expresions 

45 + 5 + 9 = 59



	* Numbers are operands, 
	* Math symbols in this case, addition (+), are called operators.
	* the symbole "= " is also an operator however the ":" is not, it represetns the result of the expresion.

Python follows mathematical conventions when performing mathematical expressions.Python performs multiplication,then addition, to obtain the final result. The expressions in the parentheses are performed first.



Variables

We can use variables to store values. In this case, we assign a value of 1 to the "variable my_variable" using the assignment operator, i.e, the equal sign.


my_variable = 1


We can then use the value somewhere else in the code by typing the exact name of the variable. We will use a colon to denote the value of the variable. basics string operations in Python including indexing, escape sequences and operations.



expressions and variables: Expressions describe a type of operation the computers perform. Expressions are operations the python performs. For example, basic arithmetic operations like adding multiple numbers.



** compound data types



List and Tuples

Tuples: tuples are an ordered sequence variaboles represented as expressed using comma separated elements within parentheses. These are data types inside the parentheses.


In Python, there are different types of data values (strings, integer, float).

Expresion
45 + 10 + 3

variable
A = 10

	Tuples : expressed using comma separated elements within parentheses

carro = (  4, "diasco", 10.75) 


	List : A list is represented with square brackets.

carro = [4, "diasco", 10.75] 


with list's we can manipulate data the same way we do with tuples i.e.:


* Nesting: it means that list's can contain strengts, int, float, bool.

A  = ["test", 10, False, 45.893,]


* Index: We can access elements on a list based on the index structure:

A[0]: "test"

A[3]: 45.893


* Slincing: it allaws to pull a section of the data 

A[1:3]:[10, False]


* Concatenate or combine:

AA = A + [34, "perro"]

AA = ["test", 10, False, 45.893,34, "perro"]


List are mutable there for we can change them using using methods, for i. e.:


1)".extend()"

A  = ["test", 10, False, 45.893,]

A.extend(["pez", 9])

A  = ["test", 10, False, 45.893,"pez", 9]

In this case we add two new elements to the list





2) ".append()"

A  = ["test", 10, False, 45.893,]

A.append(["pez", 9])

A  = ["test", 10, False, 45.893,["pez", 9]]

In this case index [3] contains the new appendix ( A[3] : ["pez", 9] )



3) ".index()"


A  = ["test", 10, False, 45.893,]

A.index("test")




4) .split()

"hard Rock".split()

["hard", "Rock"]


i.e:

"A,B,C,D".split(",")

[A,B,C,D]



5) del("X"[X])

A = ["hard Rock", 10, False, 45.893,]

del(A[0])

A = [10, False, 45.893,]


6) Clone


Multiple names referring to the same object is known as aliasing

A = ["hard rock"]

A = B

B = ["hard rock"]


If we change "A" i.e.



A = ["banana"]


"B" changes ...


B = ["banana"]

You can clone "A" using the following sintax:


B = A[:]

Now if A changes B is not affected.



Note
Every time we apply a method, the list changes.If we apply extend, we add two new elements to the list. The list L is modified by adding two new elements. If we append the string A, we further change the list adding the string A.






